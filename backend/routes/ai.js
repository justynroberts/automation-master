const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Generate code using Claude API
router.post('/generate-code', auth.authenticateToken, async (req, res) => {
    try {
        const { 
            prompt, 
            language, 
            masterPrompt, 
            claudeApiKey 
        } = req.body;

        if (!prompt || !prompt.trim()) {
            return res.status(400).json({ 
                error: 'Prompt is required' 
            });
        }

        if (!claudeApiKey || !claudeApiKey.trim()) {
            return res.status(400).json({ 
                error: 'Claude API key is required' 
            });
        }

        if (!language) {
            return res.status(400).json({ 
                error: 'Programming language is required' 
            });
        }

        // Build system prompt
        let systemPrompt = `You are a professional ${language} developer. Generate clean, well-structured, and commented ${language} code based on the user's description. Follow these guidelines:

1. Write idiomatic ${language} code
2. Include appropriate comments explaining complex logic
3. Use proper variable/function naming conventions for ${language}
4. Follow ${language} best practices and conventions
5. Make the code production-ready and error-resistant
6. Only return the code - no explanations or markdown formatting
7. Ensure the code is complete and runnable

Language-specific guidelines:
${language === 'python' ? '- Use proper Python conventions (snake_case, PEP 8)\n- Include docstrings for functions\n- Use type hints where appropriate' : 
  language === 'javascript' ? '- Use modern ES6+ features\n- Use camelCase naming\n- Include JSDoc comments for functions' :
  language === 'bash' ? '- Use proper shell scripting practices\n- Include error handling with set -e\n- Use meaningful variable names in UPPER_CASE' : 
  '- Follow standard coding conventions'}`;

        // Add master prompt if provided
        if (masterPrompt && masterPrompt.trim()) {
            systemPrompt += `\n\nAdditional Context & Instructions:\n${masterPrompt.trim()}`;
        }

        console.log(`🤖 Generating ${language} code for user ${req.user.userId}`);
        console.log(`📝 Prompt length: ${prompt.length} characters`);
        console.log(`🎯 Master prompt: ${masterPrompt ? 'Yes' : 'No'}`);

        // Dynamic import of node-fetch (ES module)
        const { default: fetch } = await import('node-fetch');

        // Call Claude API
        const response = await fetch('https://api.anthropic.com/v1/messages', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'x-api-key': claudeApiKey,
                'anthropic-version': '2023-06-01'
            },
            body: JSON.stringify({
                model: 'claude-3-haiku-20240307',
                max_tokens: 4000,
                system: systemPrompt,
                messages: [{
                    role: 'user',
                    content: prompt
                }]
            })
        });

        if (!response.ok) {
            let errorMessage = `Claude API request failed with status ${response.status}`;
            let errorDetails = null;
            
            try {
                const errorData = await response.json();
                errorMessage = errorData.error?.message || errorMessage;
                errorDetails = errorData.error;
                console.error('Claude API Error:', errorData);
            } catch (parseError) {
                console.error('Failed to parse Claude API error response:', parseError);
            }
            
            return res.status(response.status).json({
                error: errorMessage,
                details: errorDetails,
                claudeStatus: response.status
            });
        }

        const data = await response.json();
        const generatedCode = data.content[0]?.text;

        if (!generatedCode) {
            return res.status(500).json({
                error: 'No code generated by Claude API',
                details: data
            });
        }

        // Clean up the generated code (remove any markdown formatting)
        const cleanCode = generatedCode
            .replace(/```[a-zA-Z]*\n?/g, '') // Remove code block markers
            .replace(/```$/g, '') // Remove trailing code block marker
            .trim();

        console.log(`✅ Generated ${cleanCode.length} characters of ${language} code`);

        res.json({
            code: cleanCode,
            language,
            prompt: prompt.substring(0, 100) + '...', // Truncated for logging
            tokensUsed: data.usage?.output_tokens || 0,
            model: 'claude-3-haiku-20240307'
        });

    } catch (error) {
        console.error('AI Code Generation Error:', error);
        
        if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {
            return res.status(503).json({
                error: 'Unable to connect to Claude API. Please check your internet connection.',
                details: error.message
            });
        }
        
        if (error.name === 'AbortError') {
            return res.status(408).json({
                error: 'Request to Claude API timed out. Please try again.',
                details: error.message
            });
        }

        res.status(500).json({
            error: 'Internal server error during code generation',
            details: error.message
        });
    }
});

// Health check for AI service
router.get('/health', auth.authenticateToken, (req, res) => {
    res.json({
        status: 'OK',
        service: 'AI Code Generation',
        timestamp: new Date().toISOString(),
        endpoints: [
            'POST /api/ai/generate-code - Generate code using Claude API'
        ]
    });
});

module.exports = router;